$rewriteurl = "https://urlrewrite.example.com/";

foreach (
	MIME("0")->findByType("^text/(plain|html)$") ?:
	!MIME("0")->getType() or MIME("0")->getType() == "text/plain" or MIME("0")->getType() == "text/html" ? [MIME("0")] : [] as $a)
{
	if ($a->getHeader("Content-Disposition") and $a->getHeader("Content-Disposition") != "inline")
		continue;

	$data = $a->getBody();
	if (!is_string($data))
		continue;

	if ($a->getType() == "text/html")
	{
		$urldata = pcre_replace(''/<a[^>]*?(href\s*=\s*((?<quote>['"])(?<href>.+?)(?&quote)|(?<href2>[^\s>]+)))[^>]*?>/is'', function ($f) closure ($rewriteurl) {
				$url = $f[4] ?: $f[5];
				if (str_slice($url, 0, length($rewriteurl)) == $rewriteurl)
					return $f[0];
				if (($scheme = pcre_match("^([a-z]+):", str_lower($url))) and $scheme[1] != "http" and $scheme[1] != "https")
					return $f[0];
				return str_replace($f[1], ''href="''.$rewriteurl.''?url=''.url_encode($url).''"'', $f[0]);
		}, $data);
	}
	else
	{
		// John Gruber's URL Regular Expression http://daringfireball.net/2009/11/liberal_regex_for_matching_urls
		$urldata = pcre_replace(''/\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))/i'', function ($f) closure ($rewriteurl) {
				if (str_slice($f[0], 0, length($rewriteurl)) == $rewriteurl)
					return $f[0];
				return $rewriteurl."?url=".url_encode($f[0]);
		}, $data);
	}

	if ($urldata != $data)
		$a->setBody($urldata);
}
